import{s as I,n as b,a as B}from"../chunks/scheduler.Cs0xm5t1.js";import{S as x,i as C,e as m,s as S,c as f,b as v,l as R,g as _,f as c,m as u,h as y,j as w,H as N,u as D}from"../chunks/index.BPfll1Io.js";import{e as k,u as q,d as M}from"../chunks/each.UoBZRPjk.js";function Q(p,e,a){const d=p.slice();return d[1]=e[a],d[3]=a,d}function E(p){let e,a,d=p[1].note+"",h,o,s,i;return{c(){e=m("div"),a=new N(!1),h=S(),o=m("div"),s=m("img"),this.h()},l(t){e=f(t,"DIV",{class:!0});var r=v(e);a=D(r,!1),r.forEach(c),h=_(t),o=f(t,"DIV",{class:!0});var n=v(o);s=f(n,"IMG",{src:!0,alt:!0}),n.forEach(c),this.h()},h(){a.a=null,u(e,"class","slide-note odd svelte-670ddu"),B(s.src,i=`/cypher-img/${p[1].img}`)||u(s,"src",i),u(s,"alt",""),u(o,"class","slide col-span-2")},m(t,r){y(t,e,r),a.m(d,e),y(t,h,r),y(t,o,r),w(o,s)},p:b,d(t){t&&(c(e),c(h),c(o))}}}function A(p){let e,a,d,h,o,s,i=p[1].note+"";return{c(){e=m("div"),a=m("img"),h=S(),o=m("div"),s=new N(!1),this.h()},l(t){e=f(t,"DIV",{class:!0});var r=v(e);a=f(r,"IMG",{src:!0,alt:!0}),r.forEach(c),h=_(t),o=f(t,"DIV",{class:!0});var n=v(o);s=D(n,!1),n.forEach(c),this.h()},h(){B(a.src,d=`/cypher-img/${p[1].img}`)||u(a,"src",d),u(a,"alt",""),u(e,"class","slide col-span-2"),s.a=null,u(o,"class","slide-note even svelte-670ddu")},m(t,r){y(t,e,r),w(e,a),y(t,h,r),y(t,o,r),s.m(i,o)},p:b,d(t){t&&(c(e),c(h),c(o))}}}function T(p,e){let a,d;function h(i,t){return i[3]%2?A:E}let s=h(e)(e);return{key:p,first:null,c(){a=m("div"),s.c(),d=S(),this.h()},l(i){a=f(i,"DIV",{class:!0});var t=v(a);s.l(t),d=_(t),t.forEach(c),this.h()},h(){u(a,"class","py-4 grid grid-cols-3 gap-x-2 gap-y-4"),this.first=a},m(i,t){y(i,a,t),s.m(a,null),w(a,d)},p(i,t){e=i,s.p(e,t)},d(i){i&&c(a),s.d()}}}function j(p){let e,a,d=`<div class="flex justify-between"><h1 class="text-3xl text-slate-400">Cypher vs SQL: Cypher in a Bioinformatics Context</h1> <h3 class="text-xl text-slate-400">Larry Hengl 2013</h3></div> <div class="my-4"><p>Slides I presented at an internal Novartis informatics conference. Presented to scientists and IT folks.</p> <p>Goals: Be as out-of-the-box as possible. High level. Stir some interest and keep it entertaining.</p> <div>Notes:
                <ul class="pl-4"><li>This was presented using reveal.js.</li> <li>The presentation and discussion were very interactive so some context may be less clear by just looking at the slides.</li> <li>The Cypher statements were <span class="italic">live editable and dynamically run against a Neo4j DB</span> loaded on the same laptop I presented with (700K nodes, 1.2M edges).</li> <li>The results were rendered as force-directed graphs using D3 embedded in the presentation.</li> <li>Some parts may be blurred to mask IP-related information.</li></ul></div></div>`,h,o,s=[],i=new Map,t=k(p[0]);const r=n=>n[1].img;for(let n=0;n<t.length;n+=1){let l=Q(p,t,n),g=r(l);i.set(g,s[n]=T(g,l))}return{c(){e=m("div"),a=m("div"),a.innerHTML=d,h=S(),o=m("div");for(let n=0;n<s.length;n+=1)s[n].c();this.h()},l(n){e=f(n,"DIV",{class:!0});var l=v(e);a=f(l,"DIV",{class:!0,"data-svelte-h":!0}),R(a)!=="svelte-1tri50g"&&(a.innerHTML=d),h=_(l),o=f(l,"DIV",{class:!0});var g=v(o);for(let L=0;L<s.length;L+=1)s[L].l(g);g.forEach(c),l.forEach(c),this.h()},h(){u(a,"class","my-4"),u(o,"class","slides"),u(e,"class","p-8")},m(n,l){y(n,e,l),w(e,a),w(e,h),w(e,o);for(let g=0;g<s.length;g+=1)s[g]&&s[g].m(o,null)},p(n,[l]){l&1&&(t=k(n[0]),s=q(s,l,r,1,n,t,i,o,M,T,null,Q))},i:b,o:b,d(n){n&&c(e);for(let l=0;l<s.length;l+=1)s[l].d()}}}function H(p){return[[{img:"1.png",note:"What is Neo4j's Cypher query language?  How does it compared to SQL?  How can we explore answering scientific questions with Cypher as we typically would with SQL in an RDBMS?  We'll explore SQL vs NoSQL in the graph DB context, and see some Cypher vs SQL approaches to Bioinformatics data - specifically to gene co-occurance across genomic features."},{img:"2.png",note:"Let's do this!  Cypher vs SQL, Rock 'em Sock 'em style."},{img:"3.png",note:"Everyone loves a compare and contrast.  So let's match up SQL (as in RDBMS) and Cypher (as in Neo4j/GraphDB/NoSQL). In the Red corner is SQL, the reigning champ. In the Blue corner is NoSQL challenger."},{img:"4.png",note:"<span class='round'>Round 1</span><hr/>SQL has many usage domains, defined data structure/model/schema, efficient storage and access mechanism. <p class='points'>Battle point: SQL</p>"},{img:"5.png",note:"<span class='round'>Round 2</span><hr/>In a NoSQL graph DB the model <b><i>is</i></b> the database. <p class='points'>Battle point: NoSQL</p>"},{img:"6.png",note:"<span class='round'>Round 3</span><hr/>SQL is implemented in many mature vendor products (Oracle, SQLServer, DB2, etc). There are a multitude of drivers to interface with SQL systems.  RDBMSes have full ACID capabilities and keeping the Consistent and Available (CAP theorem).<p class='points'>Battle point: SQL</p>"},{img:"7.png",note:"<span class='round'>Round 4</span><hr/>NoSQL graph DBs (specifically Neo4j) is also ACID compliant and CAP friendly, has several language bindings and interfaces (Java, Python, REST, etc) and implements constraints and transactions. <p class='points'>Battle point: NoSQL</p>"},{img:"8.png",note:"<span class='round'>Round 5</span><hr/>SQL is a mature standard/spec, very easy and powerful language, everyone knows how to speak it. <p class='points'>Battle point: SQL</p>"},{img:"9.png",note:"<span class='round'>Round 6</span><hr/>NoSQL solutions are designed for commodity hardware and distributed systems, making scale-up simpler than out-of-the-box RDBMSes. Varieties: column stores, hadoop (mapreduce), key-value stores, array dbs, doc stores, and graph traversal engines. <p class='points'>Battle point: NoSQL</p>"},{img:"10.png",note:"<span class='round'>Round 7</span><hr/>Pushing statistical computations as close to the data as possible is a win, and many SQL vendors implement analytic functions within the DB. <p class='points'>Battle point: SQL</p>"},{img:"11.png",note:"<span class='round'>Round 8</span><hr/>As SQL is great for aggregations and summaries, graph DBs can easily navigate the data connections to the point of providing patterns (recommendations) that are not as easily discernible in aggregate form.  I saw the beer quote from one of the enlightend gents at Neo (Kollegger? van Bruggen?)<p class='points'>Battle point: NoSQL</p>"},{img:"12.png",note:"Who wins? Tie? Time for coffee?  There's room for both, and depending on needs, they can work together.  So let's try another tact: a tutorial on NoSQL and Cypher!  Nawww.  Let's tell a story instead."},{img:"13.png",note:"This slide was cool because it did the whole Star Wars (SQL WARS) title zoom and rolling text [couldn't pipe the SW theme song in time].  Story looked like this:<br/><br/><p>A long time ago, in a database far far away&hellip;</p><h3>SQL WARS</h3><div><div><p>EPISODE DB<br/>A Graphista steps up to lead the rebellion.</p><p>It was a period of dominance for SQL vendors, led by <i>Emperor Join</i> and his right-join man, <i>Darth 3rd Normal Form</i>.  But there stirred a new NoSQL hope.  A resistence formed.</p><p>Allies to the Verticas at the CouchBase included:</p><p>The Jedi KeyVals<br/>Han Solr and Chewsandra, chased by Jabba the Hadoop<br/>Mongo Wan Kanobi<br/>Redis Fett<br/>Riak-2D2 and SciDB-PO</p><p>Led by Neo4j and princess Trinity, Captain Morpheus, The Zion Nation, and the traverser: Cypher...<p><p><span style='text-align:center;font-style:italic;color:red;'>(wait, thought this was a Star Wars meme. what's with The Matrix refs here?)</span>...</p><p>Neo4j held the flag for freedom from schema with graphs:  nodes, edges and traversals.</p> <p>Battles ensued over which had the best features, and which would...</p><p style='text-align:center;font-style:italic;color:red;'>tl;dr</p><p>SQL = RDBMS = GRAPHS = NOSQL = CYPHER = <span style='color:green;font-size:larger;'>good</span>.</p><p style='text-align:center;font-style:italic!important;color:red;'>(pftt.  what a cop out.)</p>"},{img:"14.png",note:"&quot;It's the question that drives us. It's the question that brought you here.&quot; <br/>Science questions, of course."},{img:"15.png",note:"The problem domain to look into:  ONCNET is a gene co-occurance DB we built to store analyzed genomics data, queryable and linkable to other internal systems.  Pilot goal was to answer various bioinformatics questions about gene networks."},{img:"16.png",note:"To answer these types of questions.  Note: small font to de-emphasize exact Q's, but to show a relative list.  Feel free to use a microscope to read these (sorry, on the projector we could read these).  Blurred for your snooping inconvenience. :-)"},{img:"17.png",note:"What problems did we face using SQL?  These for starters. <br/>What else could we try?  Umm, Facebook? No wait, Neo4j!  So the next slides will step thru a basic example approaching those prior questions.  In particular, we look at how to query data from Neo4, using Cypher, and how that stacks up to SQL.  I loaded the ONCNET data from the RDBMS we used, into Neo4j, using py2neo (thanks Nige/@technige !) and the batch importer (thanks Michael/@mesirii !) and awesome examples from Max De Marzi (thanks @maxdemarzi !). 700K nodes, ~1.2M edges, forgot how many properties (1.5M+?). Loaded in ~10min on my Macbook.  One-time load, who cares."},{img:"18.png",note:"Let's grab a gene first.  NOTE: I had to smudge the actual gene names for IP reasons. Use your imagination. That green circle is our gene - a node in the graph."},{img:"19.png",note:"How about features for that gene?  Mutations, gene expression, copy number, etc. The green blurred buttons were other canned gene cypher queries, clickable and dynamically executed.  The graph is a D3 force-directed plot, rendered on the fly in the presentation."},{img:"20.png",note:"Let's find gene features associated with Gene X's expression feature.  The associations were precomputed outside the DB using bioinfo tools and scripts written in R and Perl, and loaded into the DB as nodes.  The SQL ran off the page.  The graph was neat in that it moved around on the screen while I talked as the repulsion calcs were running for the layout.  They were situatin'. It shows the query gene and it's features clustered in the center and the associated-feature nodes enveloping the outside.  On our way to a Hairball...funtimes."},{img:"21.png",note:"This cypher query was an attempt at community detection.  It finds genes that were connected to the associated-feature nodes which are connected to the original query gene.  This one took A Little While&#8482; to execute in practice, so I cheated and fudged the model a tad to help make the query dynamic and near-instant for the impatient folks in the session (remember the Goals at the top?).  There were weights and thresholds and filters and aggregations involved to determine the top set of connected genes with the highest number of evidences (depicted as node size in the graph).  The cypher certainly could be optimized, as could the SQL that I intentionally chose not to show because the sub-query nesting and self-joins were hideous.  This would be a fun query to come back to in a production setting, with larger data sets, to look at metrics and optimization patterns."},{img:"22.png",note:"Is Neo The One?"},{img:"23.png",note:"That can answer these scientific questions."},{img:"24.png",note:"Is there a magic Answer button?"},{img:"25.png",note:"Let's find out by exploring graphs.  And graphs of graphs.  Those dang things are everywhere! <br/><br/>Traverse the Dataverse.<br/>"},{img:"26.png",note:"Why didn't I take the Blue pill?!"},{img:"27.png",note:"The End."}]]}class O extends x{constructor(e){super(),C(this,e,H,j,I,{})}}export{O as component};
